// Generated by llvm2cpp - DO NOT MODIFY!

#include <llvm/Pass.h>
#include <llvm/PassManager.h>
#include <llvm/ADT/SmallVector.h>
#include <llvm/Analysis/Verifier.h>
#include <llvm/IR/BasicBlock.h>
#include <llvm/IR/CallingConv.h>
#include <llvm/IR/Constants.h>
#include <llvm/IR/DerivedTypes.h>
#include <llvm/IR/Function.h>
#include <llvm/IR/GlobalVariable.h>
#include <llvm/IR/IRPrintingPasses.h>
#include <llvm/IR/InlineAsm.h>
#include <llvm/IR/Instructions.h>
#include <llvm/IR/LLVMContext.h>
#include <llvm/IR/Module.h>
#include <llvm/Support/FormattedStream.h>
#include <llvm/Support/MathExtras.h>
#include <algorithm>
using namespace llvm;

Module* makeLLVMModule();

int main(int argc, char**argv) {
  Module* Mod = makeLLVMModule();
  verifyModule(*Mod, PrintMessageAction);
  PassManager PM;
  PM.add(createPrintModulePass(&outs()));
  PM.run(*Mod);
  return 0;
}


Module* makeLLVMModule() {
 // Module Construction
 Module* mod = new Module("runtime.bc", getGlobalContext());
 mod->setDataLayout("0x4c89bf8");
 mod->setTargetTriple("x86_64-pc-linux-gnu");
 
 // Type Definitions
 PointerType* PointerTy_0 = PointerType::get(IntegerType::get(mod->getContext(), 32), 0);
 
 ArrayType* ArrayTy_1 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 100);
 
 PointerType* PointerTy_2 = PointerType::get(ArrayTy_1, 0);
 
 ArrayType* ArrayTy_3 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 29);
 
 PointerType* PointerTy_4 = PointerType::get(ArrayTy_3, 0);
 
 ArrayType* ArrayTy_5 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 57);
 
 PointerType* PointerTy_6 = PointerType::get(ArrayTy_5, 0);
 
 ArrayType* ArrayTy_7 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 36);
 
 PointerType* PointerTy_8 = PointerType::get(ArrayTy_7, 0);
 
 ArrayType* ArrayTy_9 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 44);
 
 PointerType* PointerTy_10 = PointerType::get(ArrayTy_9, 0);
 
 ArrayType* ArrayTy_11 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 33);
 
 PointerType* PointerTy_12 = PointerType::get(ArrayTy_11, 0);
 
 ArrayType* ArrayTy_13 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 40);
 
 PointerType* PointerTy_14 = PointerType::get(ArrayTy_13, 0);
 
 std::vector<Type*>FuncTy_15_args;
 FuncTy_15_args.push_back(IntegerType::get(mod->getContext(), 32));
 FunctionType* FuncTy_15 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 1),
  /*Params=*/FuncTy_15_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_16 = PointerType::get(IntegerType::get(mod->getContext(), 8), 0);
 
 std::vector<Type*>FuncTy_18_args;
 FuncTy_18_args.push_back(PointerTy_16);
 FunctionType* FuncTy_18 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_18_args,
  /*isVarArg=*/true);
 
 PointerType* PointerTy_17 = PointerType::get(FuncTy_18, 0);
 
 std::vector<Type*>FuncTy_19_args;
 FuncTy_19_args.push_back(IntegerType::get(mod->getContext(), 32));
 FunctionType* FuncTy_19 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_19_args,
  /*isVarArg=*/false);
 
 std::vector<Type*>FuncTy_20_args;
 FuncTy_20_args.push_back(IntegerType::get(mod->getContext(), 32));
 FunctionType* FuncTy_20 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_20_args,
  /*isVarArg=*/false);
 
 std::vector<Type*>FuncTy_21_args;
 FunctionType* FuncTy_21 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_21_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_22 = PointerType::get(FuncTy_20, 0);
 
 PointerType* PointerTy_23 = PointerType::get(FuncTy_19, 0);
 
 
 // Function Declarations
 
 Function* func_Augment_init = mod->getFunction("Augment_init");
 if (!func_Augment_init) {
 func_Augment_init = Function::Create(
  /*Type=*/FuncTy_15,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"Augment_init", mod); 
 func_Augment_init->setCallingConv(CallingConv::C);
 }
 AttributeSet func_Augment_init_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::ZExt);
    PAS = AttributeSet::get(mod->getContext(), 0U, B);
   }
  
  Attrs.push_back(PAS);
  {
   AttrBuilder B;
   B.addAttribute(Attribute::UWTable);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_Augment_init_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_Augment_init->setAttributes(func_Augment_init_PAL);

Function* func_printf = mod->getFunction("printf");
if (!func_printf) {
func_printf = Function::Create(
 /*Type=*/FuncTy_18,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"printf", mod); // (external, no body)
func_printf->setCallingConv(CallingConv::C);
}
AttributeSet func_printf_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_printf_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_printf->setAttributes(func_printf_PAL);

Function* func_Augment_sig = mod->getFunction("Augment_sig");
if (!func_Augment_sig) {
func_Augment_sig = Function::Create(
 /*Type=*/FuncTy_19,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"Augment_sig", mod); 
func_Augment_sig->setCallingConv(CallingConv::C);
}
AttributeSet func_Augment_sig_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::UWTable);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_Augment_sig_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_Augment_sig->setAttributes(func_Augment_sig_PAL);

Function* func_Augment_sigPrime = mod->getFunction("Augment_sigPrime");
if (!func_Augment_sigPrime) {
func_Augment_sigPrime = Function::Create(
 /*Type=*/FuncTy_19,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"Augment_sigPrime", mod); 
func_Augment_sigPrime->setCallingConv(CallingConv::C);
}
AttributeSet func_Augment_sigPrime_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::UWTable);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_Augment_sigPrime_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_Augment_sigPrime->setAttributes(func_Augment_sigPrime_PAL);

Function* func_Augment_sigTry = mod->getFunction("Augment_sigTry");
if (!func_Augment_sigTry) {
func_Augment_sigTry = Function::Create(
 /*Type=*/FuncTy_20,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"Augment_sigTry", mod); 
func_Augment_sigTry->setCallingConv(CallingConv::C);
}
AttributeSet func_Augment_sigTry_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::UWTable);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_Augment_sigTry_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_Augment_sigTry->setAttributes(func_Augment_sigTry_PAL);

Function* func_Augment_sigDep = mod->getFunction("Augment_sigDep");
if (!func_Augment_sigDep) {
func_Augment_sigDep = Function::Create(
 /*Type=*/FuncTy_15,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"Augment_sigDep", mod); 
func_Augment_sigDep->setCallingConv(CallingConv::C);
}
AttributeSet func_Augment_sigDep_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::ZExt);
   PAS = AttributeSet::get(mod->getContext(), 0U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::UWTable);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
func_Augment_sigDep_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
func_Augment_sigDep->setAttributes(func_Augment_sigDep_PAL);

Function* func_Augment_writeOut = mod->getFunction("Augment_writeOut");
if (!func_Augment_writeOut) {
func_Augment_writeOut = Function::Create(
 /*Type=*/FuncTy_21,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"Augment_writeOut", mod); 
func_Augment_writeOut->setCallingConv(CallingConv::C);
}
AttributeSet func_Augment_writeOut_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::UWTable);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_Augment_writeOut_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_Augment_writeOut->setAttributes(func_Augment_writeOut_PAL);

// Global Variable Declarations


GlobalVariable* gvar_int32_init = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/IntegerType::get(mod->getContext(), 32),
/*isConstant=*/false,
/*Linkage=*/GlobalValue::ExternalLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/"init");
gvar_int32_init->setAlignment(4);

GlobalVariable* gvar_int32_num_sig = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/IntegerType::get(mod->getContext(), 32),
/*isConstant=*/false,
/*Linkage=*/GlobalValue::ExternalLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/"num_sig");
gvar_int32_num_sig->setAlignment(4);

GlobalVariable* gvar_array_sig = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_1,
/*isConstant=*/false,
/*Linkage=*/GlobalValue::ExternalLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/"sig");
gvar_array_sig->setAlignment(16);

GlobalVariable* gvar_array_sigPrime = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_1,
/*isConstant=*/false,
/*Linkage=*/GlobalValue::ExternalLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/"sigPrime");
gvar_array_sigPrime->setAlignment(16);

GlobalVariable* gvar_array__str = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_3,
/*isConstant=*/true,
/*Linkage=*/GlobalValue::PrivateLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/".str");
gvar_array__str->setAlignment(1);

GlobalVariable* gvar_array__str1 = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_3,
/*isConstant=*/true,
/*Linkage=*/GlobalValue::PrivateLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/".str1");
gvar_array__str1->setAlignment(1);

GlobalVariable* gvar_array__str2 = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_5,
/*isConstant=*/true,
/*Linkage=*/GlobalValue::PrivateLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/".str2");
gvar_array__str2->setAlignment(1);

GlobalVariable* gvar_array__str3 = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_7,
/*isConstant=*/true,
/*Linkage=*/GlobalValue::PrivateLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/".str3");
gvar_array__str3->setAlignment(1);

GlobalVariable* gvar_array__str4 = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_9,
/*isConstant=*/true,
/*Linkage=*/GlobalValue::PrivateLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/".str4");
gvar_array__str4->setAlignment(1);

GlobalVariable* gvar_array__str5 = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_11,
/*isConstant=*/true,
/*Linkage=*/GlobalValue::PrivateLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/".str5");
gvar_array__str5->setAlignment(1);

GlobalVariable* gvar_array__str6 = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_13,
/*isConstant=*/true,
/*Linkage=*/GlobalValue::PrivateLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/".str6");
gvar_array__str6->setAlignment(1);

// Constant Definitions
ConstantInt* const_int32_24 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("1"), 10));
ConstantInt* const_int32_25 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("0"), 10));
ConstantAggregateZero* const_array_26 = ConstantAggregateZero::get(ArrayTy_1);
Constant *const_array_27 = ConstantDataArray::getString(mod->getContext(), "Instrumentation initialized\x0A", true);
Constant *const_array_28 = ConstantDataArray::getString(mod->getContext(), "Number of blocks found : %d\x0A", true);
Constant *const_array_29 = ConstantDataArray::getString(mod->getContext(), "Block %d has been sent a SIGNAL, status was %d is now 1\x0A", true);
Constant *const_array_30 = ConstantDataArray::getString(mod->getContext(), "Block %d has been sent a SIG PRIME\x0A", true);
Constant *const_array_31 = ConstantDataArray::getString(mod->getContext(), "Signal Check: Block %d tried, state was %d\x0A", true);
Constant *const_array_32 = ConstantDataArray::getString(mod->getContext(), " - Hit, setting signal to : %d \x0A", true);
Constant *const_array_33 = ConstantDataArray::getString(mod->getContext(), "Dependency check: Waiting on signal %d\x0A", true);
std::vector<Constant*> const_ptr_34_indices;
const_ptr_34_indices.push_back(const_int32_25);
const_ptr_34_indices.push_back(const_int32_25);
Constant* const_ptr_34 = ConstantExpr::getGetElementPtr(gvar_array__str, const_ptr_34_indices);
std::vector<Constant*> const_ptr_35_indices;
const_ptr_35_indices.push_back(const_int32_25);
const_ptr_35_indices.push_back(const_int32_25);
Constant* const_ptr_35 = ConstantExpr::getGetElementPtr(gvar_array__str1, const_ptr_35_indices);
ConstantInt* const_int8_36 = ConstantInt::get(mod->getContext(), APInt(8, StringRef("0"), 10));
ConstantInt* const_int8_37 = ConstantInt::get(mod->getContext(), APInt(8, StringRef("1"), 10));
std::vector<Constant*> const_ptr_38_indices;
const_ptr_38_indices.push_back(const_int32_25);
ConstantInt* const_int64_39 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("0"), 10));
const_ptr_38_indices.push_back(const_int64_39);
Constant* const_ptr_38 = ConstantExpr::getGetElementPtr(gvar_array_sig, const_ptr_38_indices);
ConstantInt* const_int1_40 = ConstantInt::get(mod->getContext(), APInt(1, StringRef("-1"), 10));
std::vector<Constant*> const_ptr_41_indices;
const_ptr_41_indices.push_back(const_int32_25);
const_ptr_41_indices.push_back(const_int32_25);
Constant* const_ptr_41 = ConstantExpr::getGetElementPtr(gvar_array__str2, const_ptr_41_indices);
std::vector<Constant*> const_ptr_42_indices;
const_ptr_42_indices.push_back(const_int32_25);
const_ptr_42_indices.push_back(const_int32_25);
Constant* const_ptr_42 = ConstantExpr::getGetElementPtr(gvar_array__str3, const_ptr_42_indices);
std::vector<Constant*> const_ptr_43_indices;
const_ptr_43_indices.push_back(const_int32_25);
const_ptr_43_indices.push_back(const_int32_25);
Constant* const_ptr_43 = ConstantExpr::getGetElementPtr(gvar_array__str4, const_ptr_43_indices);
std::vector<Constant*> const_ptr_44_indices;
const_ptr_44_indices.push_back(const_int32_25);
const_ptr_44_indices.push_back(const_int32_25);
Constant* const_ptr_44 = ConstantExpr::getGetElementPtr(gvar_array__str5, const_ptr_44_indices);
std::vector<Constant*> const_ptr_45_indices;
const_ptr_45_indices.push_back(const_int32_25);
const_ptr_45_indices.push_back(const_int32_25);
Constant* const_ptr_45 = ConstantExpr::getGetElementPtr(gvar_array__str6, const_ptr_45_indices);
ConstantInt* const_int32_46 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("3"), 10));

// Global Variable Definitions
gvar_int32_init->setInitializer(const_int32_24);
gvar_int32_num_sig->setInitializer(const_int32_25);
gvar_array_sig->setInitializer(const_array_26);
gvar_array_sigPrime->setInitializer(const_array_26);
gvar_array__str->setInitializer(const_array_27);
gvar_array__str1->setInitializer(const_array_28);
gvar_array__str2->setInitializer(const_array_29);
gvar_array__str3->setInitializer(const_array_30);
gvar_array__str4->setInitializer(const_array_31);
gvar_array__str5->setInitializer(const_array_32);
gvar_array__str6->setInitializer(const_array_33);

// Function Definitions

// Function: Augment_init (func_Augment_init)
{
 Function::arg_iterator args = func_Augment_init->arg_begin();
 Value* int32_numBlocks = args++;
 int32_numBlocks->setName("numBlocks");
 
 BasicBlock* label_47 = BasicBlock::Create(mod->getContext(), "",func_Augment_init,0);
 BasicBlock* label_48 = BasicBlock::Create(mod->getContext(), "",func_Augment_init,0);
 BasicBlock* label_49 = BasicBlock::Create(mod->getContext(), "",func_Augment_init,0);
 BasicBlock* label_50 = BasicBlock::Create(mod->getContext(), "",func_Augment_init,0);
 BasicBlock* label_51 = BasicBlock::Create(mod->getContext(), "",func_Augment_init,0);
 BasicBlock* label_52 = BasicBlock::Create(mod->getContext(), "",func_Augment_init,0);
 BasicBlock* label_53 = BasicBlock::Create(mod->getContext(), "",func_Augment_init,0);
 
 // Block  (label_47)
 AllocaInst* ptr_54 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "", label_47);
 ptr_54->setAlignment(4);
 AllocaInst* ptr_i = new AllocaInst(IntegerType::get(mod->getContext(), 32), "i", label_47);
 ptr_i->setAlignment(4);
 StoreInst* void_55 = new StoreInst(int32_numBlocks, ptr_54, false, label_47);
 void_55->setAlignment(4);
 LoadInst* int32_56 = new LoadInst(gvar_int32_init, "", false, label_47);
 int32_56->setAlignment(4);
 ICmpInst* int1_57 = new ICmpInst(*label_47, ICmpInst::ICMP_NE, int32_56, const_int32_25, "");
 BranchInst::Create(label_48, label_53, int1_57, label_47);
 
 // Block  (label_48)
 CallInst* int32_59 = CallInst::Create(func_printf, const_ptr_34, "", label_48);
 int32_59->setCallingConv(CallingConv::C);
 int32_59->setTailCall(false);
 AttributeSet int32_59_PAL;
 int32_59->setAttributes(int32_59_PAL);
 
 LoadInst* int32_60 = new LoadInst(ptr_54, "", false, label_48);
 int32_60->setAlignment(4);
 std::vector<Value*> int32_61_params;
 int32_61_params.push_back(const_ptr_35);
 int32_61_params.push_back(int32_60);
 CallInst* int32_61 = CallInst::Create(func_printf, int32_61_params, "", label_48);
 int32_61->setCallingConv(CallingConv::C);
 int32_61->setTailCall(false);
 AttributeSet int32_61_PAL;
 int32_61->setAttributes(int32_61_PAL);
 
 LoadInst* int32_62 = new LoadInst(ptr_54, "", false, label_48);
 int32_62->setAlignment(4);
 StoreInst* void_63 = new StoreInst(int32_62, gvar_int32_num_sig, false, label_48);
 void_63->setAlignment(4);
 StoreInst* void_64 = new StoreInst(const_int32_25, ptr_i, false, label_48);
 void_64->setAlignment(4);
 BranchInst::Create(label_49, label_48);
 
 // Block  (label_49)
 LoadInst* int32_66 = new LoadInst(ptr_i, "", false, label_49);
 int32_66->setAlignment(4);
 LoadInst* int32_67 = new LoadInst(ptr_54, "", false, label_49);
 int32_67->setAlignment(4);
 ICmpInst* int1_68 = new ICmpInst(*label_49, ICmpInst::ICMP_SLT, int32_66, int32_67, "");
 BranchInst::Create(label_50, label_52, int1_68, label_49);
 
 // Block  (label_50)
 LoadInst* int32_70 = new LoadInst(ptr_i, "", false, label_50);
 int32_70->setAlignment(4);
 CastInst* int64_71 = new SExtInst(int32_70, IntegerType::get(mod->getContext(), 64), "", label_50);
 std::vector<Value*> ptr_72_indices;
 ptr_72_indices.push_back(const_int32_25);
 ptr_72_indices.push_back(int64_71);
 Instruction* ptr_72 = GetElementPtrInst::Create(gvar_array_sig, ptr_72_indices, "", label_50);
 StoreInst* void_73 = new StoreInst(const_int8_36, ptr_72, false, label_50);
 void_73->setAlignment(1);
 LoadInst* int32_74 = new LoadInst(ptr_i, "", false, label_50);
 int32_74->setAlignment(4);
 CastInst* int64_75 = new SExtInst(int32_74, IntegerType::get(mod->getContext(), 64), "", label_50);
 std::vector<Value*> ptr_76_indices;
 ptr_76_indices.push_back(const_int32_25);
 ptr_76_indices.push_back(int64_75);
 Instruction* ptr_76 = GetElementPtrInst::Create(gvar_array_sigPrime, ptr_76_indices, "", label_50);
 StoreInst* void_77 = new StoreInst(const_int8_36, ptr_76, false, label_50);
 void_77->setAlignment(1);
 BranchInst::Create(label_51, label_50);
 
 // Block  (label_51)
 LoadInst* int32_79 = new LoadInst(ptr_i, "", false, label_51);
 int32_79->setAlignment(4);
 BinaryOperator* int32_80 = BinaryOperator::Create(Instruction::Add, int32_79, const_int32_24, "", label_51);
 StoreInst* void_81 = new StoreInst(int32_80, ptr_i, false, label_51);
 void_81->setAlignment(4);
 BranchInst::Create(label_49, label_51);
 
 // Block  (label_52)
 StoreInst* void_83 = new StoreInst(const_int8_37, const_ptr_38, false, label_52);
 void_83->setAlignment(1);
 StoreInst* void_84 = new StoreInst(const_int32_25, gvar_int32_init, false, label_52);
 void_84->setAlignment(4);
 BranchInst::Create(label_53, label_52);
 
 // Block  (label_53)
 ReturnInst::Create(mod->getContext(), const_int1_40, label_53);
 
}

// Function: Augment_sig (func_Augment_sig)
{
 Function::arg_iterator args = func_Augment_sig->arg_begin();
 Value* int32_blockNum = args++;
 int32_blockNum->setName("blockNum");
 
 BasicBlock* label_87 = BasicBlock::Create(mod->getContext(), "",func_Augment_sig,0);
 
 // Block  (label_87)
 AllocaInst* ptr_88 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "", label_87);
 ptr_88->setAlignment(4);
 StoreInst* void_89 = new StoreInst(int32_blockNum, ptr_88, false, label_87);
 void_89->setAlignment(4);
 LoadInst* int32_90 = new LoadInst(ptr_88, "", false, label_87);
 int32_90->setAlignment(4);
 LoadInst* int32_91 = new LoadInst(ptr_88, "", false, label_87);
 int32_91->setAlignment(4);
 CastInst* int64_92 = new SExtInst(int32_91, IntegerType::get(mod->getContext(), 64), "", label_87);
 std::vector<Value*> ptr_93_indices;
 ptr_93_indices.push_back(const_int32_25);
 ptr_93_indices.push_back(int64_92);
 Instruction* ptr_93 = GetElementPtrInst::Create(gvar_array_sig, ptr_93_indices, "", label_87);
 LoadInst* int8_94 = new LoadInst(ptr_93, "", false, label_87);
 int8_94->setAlignment(1);
 CastInst* int1_95 = new TruncInst(int8_94, IntegerType::get(mod->getContext(), 1), "", label_87);
 CastInst* int32_96 = new ZExtInst(int1_95, IntegerType::get(mod->getContext(), 32), "", label_87);
 std::vector<Value*> int32_97_params;
 int32_97_params.push_back(const_ptr_41);
 int32_97_params.push_back(int32_90);
 int32_97_params.push_back(int32_96);
 CallInst* int32_97 = CallInst::Create(func_printf, int32_97_params, "", label_87);
 int32_97->setCallingConv(CallingConv::C);
 int32_97->setTailCall(false);
 AttributeSet int32_97_PAL;
 int32_97->setAttributes(int32_97_PAL);
 
 LoadInst* int32_98 = new LoadInst(ptr_88, "", false, label_87);
 int32_98->setAlignment(4);
 CastInst* int64_99 = new SExtInst(int32_98, IntegerType::get(mod->getContext(), 64), "", label_87);
 std::vector<Value*> ptr_100_indices;
 ptr_100_indices.push_back(const_int32_25);
 ptr_100_indices.push_back(int64_99);
 Instruction* ptr_100 = GetElementPtrInst::Create(gvar_array_sig, ptr_100_indices, "", label_87);
 StoreInst* void_101 = new StoreInst(const_int8_37, ptr_100, false, label_87);
 void_101->setAlignment(1);
 ReturnInst::Create(mod->getContext(), label_87);
 
}

// Function: Augment_sigPrime (func_Augment_sigPrime)
{
 Function::arg_iterator args = func_Augment_sigPrime->arg_begin();
 Value* int32_blockNum_103 = args++;
 int32_blockNum_103->setName("blockNum");
 
 BasicBlock* label_104 = BasicBlock::Create(mod->getContext(), "",func_Augment_sigPrime,0);
 
 // Block  (label_104)
 AllocaInst* ptr_105 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "", label_104);
 ptr_105->setAlignment(4);
 StoreInst* void_106 = new StoreInst(int32_blockNum_103, ptr_105, false, label_104);
 void_106->setAlignment(4);
 LoadInst* int32_107 = new LoadInst(ptr_105, "", false, label_104);
 int32_107->setAlignment(4);
 std::vector<Value*> int32_108_params;
 int32_108_params.push_back(const_ptr_42);
 int32_108_params.push_back(int32_107);
 CallInst* int32_108 = CallInst::Create(func_printf, int32_108_params, "", label_104);
 int32_108->setCallingConv(CallingConv::C);
 int32_108->setTailCall(false);
 AttributeSet int32_108_PAL;
 int32_108->setAttributes(int32_108_PAL);
 
 LoadInst* int32_109 = new LoadInst(ptr_105, "", false, label_104);
 int32_109->setAlignment(4);
 CastInst* int64_110 = new SExtInst(int32_109, IntegerType::get(mod->getContext(), 64), "", label_104);
 std::vector<Value*> ptr_111_indices;
 ptr_111_indices.push_back(const_int32_25);
 ptr_111_indices.push_back(int64_110);
 Instruction* ptr_111 = GetElementPtrInst::Create(gvar_array_sigPrime, ptr_111_indices, "", label_104);
 StoreInst* void_112 = new StoreInst(const_int8_37, ptr_111, false, label_104);
 void_112->setAlignment(1);
 ReturnInst::Create(mod->getContext(), label_104);
 
}

// Function: Augment_sigTry (func_Augment_sigTry)
{
 Function::arg_iterator args = func_Augment_sigTry->arg_begin();
 Value* int32_blockNum_114 = args++;
 int32_blockNum_114->setName("blockNum");
 
 BasicBlock* label_115 = BasicBlock::Create(mod->getContext(), "",func_Augment_sigTry,0);
 BasicBlock* label_116 = BasicBlock::Create(mod->getContext(), "",func_Augment_sigTry,0);
 BasicBlock* label_117 = BasicBlock::Create(mod->getContext(), "",func_Augment_sigTry,0);
 BasicBlock* label_118 = BasicBlock::Create(mod->getContext(), "",func_Augment_sigTry,0);
 
 // Block  (label_115)
 AllocaInst* ptr_119 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "", label_115);
 ptr_119->setAlignment(4);
 AllocaInst* ptr_120 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "", label_115);
 ptr_120->setAlignment(4);
 StoreInst* void_121 = new StoreInst(int32_blockNum_114, ptr_120, false, label_115);
 void_121->setAlignment(4);
 LoadInst* int32_122 = new LoadInst(ptr_120, "", false, label_115);
 int32_122->setAlignment(4);
 LoadInst* int32_123 = new LoadInst(ptr_120, "", false, label_115);
 int32_123->setAlignment(4);
 CastInst* int64_124 = new SExtInst(int32_123, IntegerType::get(mod->getContext(), 64), "", label_115);
 std::vector<Value*> ptr_125_indices;
 ptr_125_indices.push_back(const_int32_25);
 ptr_125_indices.push_back(int64_124);
 Instruction* ptr_125 = GetElementPtrInst::Create(gvar_array_sig, ptr_125_indices, "", label_115);
 LoadInst* int8_126 = new LoadInst(ptr_125, "", false, label_115);
 int8_126->setAlignment(1);
 CastInst* int1_127 = new TruncInst(int8_126, IntegerType::get(mod->getContext(), 1), "", label_115);
 CastInst* int32_128 = new ZExtInst(int1_127, IntegerType::get(mod->getContext(), 32), "", label_115);
 std::vector<Value*> int32_129_params;
 int32_129_params.push_back(const_ptr_43);
 int32_129_params.push_back(int32_122);
 int32_129_params.push_back(int32_128);
 CallInst* int32_129 = CallInst::Create(func_printf, int32_129_params, "", label_115);
 int32_129->setCallingConv(CallingConv::C);
 int32_129->setTailCall(false);
 AttributeSet int32_129_PAL;
 int32_129->setAttributes(int32_129_PAL);
 
 LoadInst* int32_130 = new LoadInst(ptr_120, "", false, label_115);
 int32_130->setAlignment(4);
 CastInst* int64_131 = new SExtInst(int32_130, IntegerType::get(mod->getContext(), 64), "", label_115);
 std::vector<Value*> ptr_132_indices;
 ptr_132_indices.push_back(const_int32_25);
 ptr_132_indices.push_back(int64_131);
 Instruction* ptr_132 = GetElementPtrInst::Create(gvar_array_sig, ptr_132_indices, "", label_115);
 LoadInst* int8_133 = new LoadInst(ptr_132, "", false, label_115);
 int8_133->setAlignment(1);
 CastInst* int1_134 = new TruncInst(int8_133, IntegerType::get(mod->getContext(), 1), "", label_115);
 BranchInst::Create(label_116, label_117, int1_134, label_115);
 
 // Block  (label_116)
 LoadInst* int32_136 = new LoadInst(ptr_120, "", false, label_116);
 int32_136->setAlignment(4);
 CastInst* int64_137 = new SExtInst(int32_136, IntegerType::get(mod->getContext(), 64), "", label_116);
 std::vector<Value*> ptr_138_indices;
 ptr_138_indices.push_back(const_int32_25);
 ptr_138_indices.push_back(int64_137);
 Instruction* ptr_138 = GetElementPtrInst::Create(gvar_array_sig, ptr_138_indices, "", label_116);
 StoreInst* void_139 = new StoreInst(const_int8_36, ptr_138, false, label_116);
 void_139->setAlignment(1);
 LoadInst* int32_140 = new LoadInst(ptr_120, "", false, label_116);
 int32_140->setAlignment(4);
 CastInst* int64_141 = new SExtInst(int32_140, IntegerType::get(mod->getContext(), 64), "", label_116);
 std::vector<Value*> ptr_142_indices;
 ptr_142_indices.push_back(const_int32_25);
 ptr_142_indices.push_back(int64_141);
 Instruction* ptr_142 = GetElementPtrInst::Create(gvar_array_sig, ptr_142_indices, "", label_116);
 LoadInst* int8_143 = new LoadInst(ptr_142, "", false, label_116);
 int8_143->setAlignment(1);
 CastInst* int1_144 = new TruncInst(int8_143, IntegerType::get(mod->getContext(), 1), "", label_116);
 CastInst* int32_145 = new ZExtInst(int1_144, IntegerType::get(mod->getContext(), 32), "", label_116);
 std::vector<Value*> int32_146_params;
 int32_146_params.push_back(const_ptr_44);
 int32_146_params.push_back(int32_145);
 CallInst* int32_146 = CallInst::Create(func_printf, int32_146_params, "", label_116);
 int32_146->setCallingConv(CallingConv::C);
 int32_146->setTailCall(false);
 AttributeSet int32_146_PAL;
 int32_146->setAttributes(int32_146_PAL);
 
 StoreInst* void_147 = new StoreInst(const_int32_24, ptr_119, false, label_116);
 BranchInst::Create(label_118, label_116);
 
 // Block  (label_117)
 StoreInst* void_149 = new StoreInst(const_int32_25, ptr_119, false, label_117);
 BranchInst::Create(label_118, label_117);
 
 // Block  (label_118)
 LoadInst* int32_151 = new LoadInst(ptr_119, "", false, label_118);
 ReturnInst::Create(mod->getContext(), int32_151, label_118);
 
}

// Function: Augment_sigDep (func_Augment_sigDep)
{
 Function::arg_iterator args = func_Augment_sigDep->arg_begin();
 Value* int32_blockNum_153 = args++;
 int32_blockNum_153->setName("blockNum");
 
 BasicBlock* label_154 = BasicBlock::Create(mod->getContext(), "",func_Augment_sigDep,0);
 
 // Block  (label_154)
 AllocaInst* ptr_155 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "", label_154);
 ptr_155->setAlignment(4);
 StoreInst* void_156 = new StoreInst(int32_blockNum_153, ptr_155, false, label_154);
 void_156->setAlignment(4);
 LoadInst* int32_157 = new LoadInst(ptr_155, "", false, label_154);
 int32_157->setAlignment(4);
 std::vector<Value*> int32_158_params;
 int32_158_params.push_back(const_ptr_45);
 int32_158_params.push_back(int32_157);
 CallInst* int32_158 = CallInst::Create(func_printf, int32_158_params, "", label_154);
 int32_158->setCallingConv(CallingConv::C);
 int32_158->setTailCall(false);
 AttributeSet int32_158_PAL;
 int32_158->setAttributes(int32_158_PAL);
 
 LoadInst* int32_159 = new LoadInst(ptr_155, "", false, label_154);
 int32_159->setAlignment(4);
 CastInst* int64_160 = new SExtInst(int32_159, IntegerType::get(mod->getContext(), 64), "", label_154);
 std::vector<Value*> ptr_161_indices;
 ptr_161_indices.push_back(const_int32_25);
 ptr_161_indices.push_back(int64_160);
 Instruction* ptr_161 = GetElementPtrInst::Create(gvar_array_sigPrime, ptr_161_indices, "", label_154);
 LoadInst* int8_162 = new LoadInst(ptr_161, "", false, label_154);
 int8_162->setAlignment(1);
 CastInst* int1_163 = new TruncInst(int8_162, IntegerType::get(mod->getContext(), 1), "", label_154);
 ReturnInst::Create(mod->getContext(), int1_163, label_154);
 
}

// Function: Augment_writeOut (func_Augment_writeOut)
{
 
 BasicBlock* label_165 = BasicBlock::Create(mod->getContext(), "",func_Augment_writeOut,0);
 BasicBlock* label_166 = BasicBlock::Create(mod->getContext(), "",func_Augment_writeOut,0);
 BasicBlock* label_167 = BasicBlock::Create(mod->getContext(), "",func_Augment_writeOut,0);
 
 // Block  (label_165)
 AllocaInst* ptr_x = new AllocaInst(IntegerType::get(mod->getContext(), 8), "x", label_165);
 ptr_x->setAlignment(1);
 CallInst* int32_168 = CallInst::Create(func_Augment_sigTry, const_int32_46, "", label_165);
 int32_168->setCallingConv(CallingConv::C);
 int32_168->setTailCall(false);
 AttributeSet int32_168_PAL;
 int32_168->setAttributes(int32_168_PAL);
 
 ICmpInst* int1_169 = new ICmpInst(*label_165, ICmpInst::ICMP_NE, int32_168, const_int32_25, "");
 CastInst* int8_170 = new ZExtInst(int1_169, IntegerType::get(mod->getContext(), 8), "", label_165);
 StoreInst* void_171 = new StoreInst(int8_170, ptr_x, false, label_165);
 void_171->setAlignment(1);
 LoadInst* int8_172 = new LoadInst(ptr_x, "", false, label_165);
 int8_172->setAlignment(1);
 CastInst* int1_173 = new TruncInst(int8_172, IntegerType::get(mod->getContext(), 1), "", label_165);
 BranchInst::Create(label_166, label_167, int1_173, label_165);
 
 // Block  (label_166)
 CallInst* void_175 = CallInst::Create(func_Augment_sigPrime, const_int32_46, "", label_166);
 void_175->setCallingConv(CallingConv::C);
 void_175->setTailCall(false);
 AttributeSet void_175_PAL;
 void_175->setAttributes(void_175_PAL);
 
 BranchInst::Create(label_167, label_166);
 
 // Block  (label_167)
 ReturnInst::Create(mod->getContext(), label_167);
 
}

return mod;
}
